//
// rt_localNewDoc.tql
// NEEDS UPDATING

configIni = sysInfo("ini");

inDesignSDKVersion = configIni.placeholders.INDESIGN_SDK_VERSION;
inDesignCoordinatorSuffix = configIni.placeholders.INDESIGN_COORDINATOR_SUFFIX;
inDesignEngineName = configIni.sampleScripts.INDESIGN_TARGET_ENGINE;
coordinatorName = "net.tightener.coordinator.indesign." + inDesignSDKVersion + inDesignCoordinatorSuffix;
isServer = coordinatorName.indexOf(".server.") >= 0;
timeOut = eval(configIni.sampleScripts.LOCAL_TIMEOUT_MS);

if (isServer) 
{
    feedBack = function(message) { 
        stdOut(message + "\n"); 
        evalExtendScript("alert(\"" + message + "\")");
    }    
}
else 
{
    feedBack = function(message) { 
        stdOut(message + "\n"); 
    }
}

feedBack("localAccessInDesignAppName.tql");

target = 
    "tgh:///" + 
    coordinatorName + 
    "/" + 
    inDesignEngineName;

feedBack("Targeted InDesign is " + target);

inDesignScript = <<EOF

doc = app.documents.add();
spread = doc.spreads[0];
textFrame = spread.textFrames.add();
textFrame.contents = "This is some text";
textFrame.geometricBounds = [5, 5, 80, 80];
textFrame.contents

EOF

// Use a blocking eval when timeOut value is provided.
// This blocks until data received or timed out
// See `localAccessInDesignSysInfo.tql` for alternate way of using 
// a blocking eval

result = eval(
    inDesignScript, 
    target, 
    timeOut);

if (result)
{
    retVal = "script returns '" + result + "'";    
}
else
{
    retVal = "Cannot reach " + target;
}

feedBack(retVal);
